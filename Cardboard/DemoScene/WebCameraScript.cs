//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.IO;
using System;

public class WebCameraScript : MonoBehaviour {
	
	//public GameObject background;
	//public Texture tex;
	private WebCamTexture webCameraTexture;
	
	void Start () {
		
		// Checks how many and which cameras are available on the device
		for (int cameraIndex = 0; cameraIndex < WebCamTexture.devices.Length; cameraIndex++)
		{
			// We want the back camera
			if (!WebCamTexture.devices[cameraIndex].isFrontFacing)
			{
				int width = (Screen.width > Screen.height) ? Screen.width : Screen.height;
				int height = (Screen.width > Screen.height) ? Screen.height : Screen.width;
				webCameraTexture = new WebCamTexture(cameraIndex, width/2, height);
				//webCameraTexture = new WebCamTexture(cameraIndex, 200, 200);
				
				// Here we flip the GuiTexture by applying a localScale transformation
				// works only in Landscape mode
				//myCameraTexture.transform.localScale = new Vector3(-1,-1,1);
			}
			
		}    
		
		// Here we tell that the texture of coming from the camera should be applied 
		// to our GUITexture. As we have flipped it before the camera preview will have the 
		// correct orientation
		if (webCameraTexture != null) {
			GetComponent<GUITexture>().texture = webCameraTexture;
			//	pixelInset.width = Screen.width/2;
			//GetComponent<GUITexture>().pixelInset.height = Screen.height;
			webCameraTexture.Play ();
		}

		//background.GetComponent<GUITexture>().texture = tex;
		//Vector3 v = cameraToLookAt.transform.position - background.transform.position;
		//background.transform.LookAt(cameraToLookAt.transform.position);
		//Vector3 pos = background.transform.position;
		//pos.z = cameraToLookAt.transform.position.z - cameraToLookAt.farClipPlane/2;
		//background.transform.Translate(pos - background.transform.position);
		//RenderSettings.skybox.mainTexture = webCameraTexture;
		
		// Starts the camera

	}
	
	public void ShowCamera()
	{
		//if(webCameraTexture != null) webCameraTexture.Play();
	}
	
	public void HideCamera()
	{
		//if(webCameraTexture != null) webCameraTexture.Stop();	
	}
	
	void OnGUI()
	{
		// A button to demonstrate how to turn the camera on and off, in case you need it
		//if(GUI.Button(new Rect(0,0,100,100),"ON/OFF"))
		//{
		//	if(myTexture.GetComponent<GUITexture>().enabled)
		//		this.HideCamera();
		//	else
		//		this.ShowCamera();
		//}
	} 
	
	void Update()
	{
		int width = (Screen.width > Screen.height) ? Screen.width : Screen.height;
		int height = (Screen.width > Screen.height) ? Screen.height : Screen.width;
		GetComponent<GUITexture>().pixelInset.Set(0, 0, width/2, height);
	}
}

